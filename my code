# Functions for handling orders
def create_order(order_id, customer_name, dish):
    return {
        'order_id': order_id,
        'customer_name': customer_name,
        'dish': dish,
        'status': 'Pending'
    }


def update_order_status(orders, order_id, new_status):
    for order in orders:
        if order['order_id'] == order_id:
            if new_status.lower() in ["in progress", "completed"]:
                order['status'] = new_status
                print(f"Order {order_id} status updated to: {order['status']}")
            else:
                print("Invalid status. Please use 'In Progress' or 'Completed'.")
            break
    else:
        print(f"Order {order_id} not found.")


def view_orders(orders):
    if not orders:
        print("No orders placed yet.")
    else:
        print("Customer Orders:")
        for order in orders:
            print(
                f"- Order ID: {order['order_id']}, Customer: {order['customer_name']}, Dish: {order['dish']}, Status: {order['status']}")


# Functions for handling ingredients
def load_ingredients(filename):
    ingredients = []
    try:
        with open(filename, "r") as file:
            for line in file:
                ingredient_id, name, quantity = line.strip().split(",")
                ingredients.append({
                    'ingredient_id': int(ingredient_id),
                    'name': name,
                    'quantity': quantity  # Store as string
                })
    except FileNotFoundError:
        print(f"{filename} not found. Starting with an empty inventory.")
    return ingredients


def save_ingredients(filename, ingredients):
    with open(filename, "w") as file:
        for ingredient in ingredients:
            file.write(f"{ingredient['ingredient_id']},{ingredient['name']},{ingredient['quantity']}\n")


def add_ingredient(ingredients):
    ingredient_id = int(input("Enter ingredient ID: "))

    # Check for duplicate ingredient ID
    for ingredient in ingredients:
        if ingredient['ingredient_id'] == ingredient_id:
            print("Ingredient ID already exists. Please choose a different ID.")
            return  # Exit the function if ID is duplicate

    name = input("Enter ingredient name: ")
    quantity = input("Enter ingredient quantity (can be string or int): ")  # Accept both types
    ingredients.append({
        'ingredient_id': ingredient_id,
        'name': name,
        'quantity': quantity  # Store quantity as string
    })
    save_ingredients("ingredients.txt", ingredients)
    print("Ingredient added successfully!")


def edit_ingredient(ingredients):
    ingredient_id = int(input("Enter ingredient ID to edit: "))
    for ingredient in ingredients:
        if ingredient['ingredient_id'] == ingredient_id:
            ingredient['name'] = input("Enter new ingredient name: ")
            quantity = input("Enter new ingredient quantity: ")
            ingredient['quantity'] = quantity  # Store quantity as string
            save_ingredients("ingredients.txt", ingredients)
            print("Ingredient updated successfully!")
            break
    else:
        print("Ingredient not found!")


def delete_ingredient(ingredients):
    ingredient_id = int(input("Enter ingredient ID to delete: "))
    for ingredient in ingredients:
        if ingredient['ingredient_id'] == ingredient_id:
            ingredients.remove(ingredient)
            save_ingredients("ingredients.txt", ingredients)
            print("Ingredient deleted successfully!")
            break
    else:
        print("Ingredient not found!")


def view_ingredients(ingredients):
    if not ingredients:
        print("Ingredient inventory is empty.")
    else:
        print("Current Ingredients:")
        for ingredient in ingredients:
            print(
                f"- ID: {ingredient['ingredient_id']}, Name: {ingredient['name']}, Quantity: {ingredient['quantity']}")


# User registration
def register():
    chef_id = input("Enter your ID: ")

    # Check for duplicate user ID
    with open("user.txt", "r") as file:
        for line in file:
            lst = line.strip().split(",")
            if lst[0] == chef_id:
                print("ID already exists. Please choose a different ID.")
                return  # Exit the function if ID is duplicate

    chef_username = input("Enter username: ")
    chef_password = input("Enter password: ")
    chef_email = input("Enter your Email: ")

    with open("user.txt", "a") as file:
        file.write(f"{chef_id},{chef_email},{chef_username},{chef_password},chef\n")
    print("User registered successfully!\n")


# Validate login
def validate_login(chef_username, chef_password):
    with open("user.txt", "r") as file:
        for line in file:
            lst = line.strip().split(",")
            # Ensure each line has at least 5 components (ID, email, username, password, role)
            if len(lst) >= 5:
                if (lst[2] == chef_username or lst[1] == chef_username) and lst[3] == chef_password:
                    return lst[0], lst[2], lst[4]  # Return user ID, username, and role
    return None


# Handle login attempts
def login_attempts():
    attempts = 3
    while attempts > 0:
        chef_username = input("Enter your username: ")
        chef_password = input("Enter your password: ")

        user_data = validate_login(chef_username, chef_password)
        if user_data:
            print(f"Login successful! User ID: {user_data[0]}, Role: {user_data[2]}")
            if user_data[2] == 'chef':
                print(f"Welcome, Chef {user_data[1]}!")
            return user_data  # Return user data if login successful
        else:
            attempts -= 1
            print(f"Wrong username or password, {attempts} attempts left")

        if attempts == 0:
            print("Login unsuccessful, bye")
            return None


# Function to update user profile
def update_profile(user_id):
    users = []
    found = False
    with open("user.txt", "r") as file:
        for line in file:
            lst = line.strip().split(",")
            if lst[0] == user_id:
                found = True
                print("Current profile details:")
                print(f"Username: {lst[2]}, Email: {lst[1]}")
                new_username = input("Enter new username (leave blank to keep current): ")
                new_email = input("Enter new email (leave blank to keep current): ")
                new_password = input("Enter new password (leave blank to keep current): ")

                # Update fields if new input is provided
                if new_username:
                    lst[2] = new_username
                if new_email:
                    lst[1] = new_email
                if new_password:
                    lst[3] = new_password

            users.append(",".join(lst))

    if found:
        with open("user.txt", "w") as file:
            for user in users:
                file.write(user + "\n")
        print("Profile updated successfully!")
    else:
        print("User not found!")


# Main management system for logged-in users
def main(logged_in_user):
    if not logged_in_user:
        print("Please log in first.")
        return

    ingredients = load_ingredients("ingredients.txt")
    orders = []

    while True:
        print("\nManagement Menu:")
        print("1. Add Ingredient")
        print("2. Edit Ingredient")
        print("3. Delete Ingredient")
        print("4. View Ingredients")
        print("5. Add Order")
        print("6. Update Order Status")
        print("7. View Orders")
        print("8. Update Profile")  # Add option to update profile
        print("9. Logout")
        print("10. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            add_ingredient(ingredients)
        elif choice == "2":
            edit_ingredient(ingredients)
        elif choice == "3":
            delete_ingredient(ingredients)
        elif choice == "4":
            view_ingredients(ingredients)
        elif choice == "5":
            order_id = int(input("Enter order ID: "))
            customer_name = input("Enter customer name: ")
            dish = input("Enter dish: ")
            orders.append(create_order(order_id, customer_name, dish))
        elif choice == "6":
            order_id = int(input("Enter order ID: "))
            new_status = input("Enter new status (In Progress/Completed): ")
            update_order_status(orders, order_id, new_status)
        elif choice == "7":
            view_orders(orders)
        elif choice == "8":
            update_profile(logged_in_user[0])  # Pass user ID for profile update
        elif choice == "9":
            print(f"Goodbye, {logged_in_user[1]}!")
            return  # Logs out the user and returns to the login screen
        elif choice == "10":
            print("Exiting program...")
            exit()
        else:
            print("Invalid choice. Please try again.")


# User registration and login system
while True:
    print("\n1. Register")
    print("2. Login")
    print("3. Exit")

    choice = input("Select your choice (1-3): ")

    if choice == '1':
        register()
    elif choice == '2':
        logged_in_user = login_attempts()
        if logged_in_user:
            main(logged_in_user)  # Proceed to main management system if login is successful
    elif choice == '3':
        print("Exiting program...")
        break
    else:
        print("Invalid choice! Please pick between (1-3).")


